Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.

Example 1:
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Example 2:
Input: root = [5,3,6,2,4,null,7], k = 28
Output: false

Constraints:
The number of nodes in the tree is in the range [1, 104].
-104 <= Node.val <= 104
root is guaranteed to be a valid binary search tree.
-105 <= k <= 105
******************************************
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

    def search(self, root,curr, k):
        if not root:
            return False
        if root.val == k and root!=curr:
            return True
        if self.search(root.left,curr, k):
            return True
        if self.search(root.right,curr, k):
            return True
        return False
    def helper(self, root, curr, k):
        if not curr:
            return False
        temp = k - curr.val
        if self.search(root,curr,temp):
            return True
        if self.helper(root,curr.left, k):
            return True
        if self.helper(root,curr.right, k):
            return True
        return False
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        return self.helper(root, root, k)
**********************************************        
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:

    def search(self, root,curr, k):
        if not root:
            return False
        if root.val == k and root!=curr:
            return True
        if root.val>k:
            return self.search(root.left, curr, k)
        else:
            return self.search(root.right, curr, k)
    def helper(self, root, curr, k):
        if not curr:
            return False
        temp = k - curr.val
        if self.search(root,curr,temp):
            return True
        if self.helper(root,curr.left, k):
            return True
        if self.helper(root,curr.right, k):
            return True
        return False
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        return self.helper(root, root, k)
***************************************************
https://youtu.be/gwxA6MjcOdI
TWO POINTER APPROACH in BST using 2 stack
**********
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.stackLow = []
        self.stackHigh = []
    def leftAppend(self,root):
        while root:
            self.stackLow.append(root)
            root = root.left
    def rightAppend(self, root):
        while root:
            self.stackHigh.append(root)
            root = root.right

    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        #append all the left of root in stackLow
        self.leftAppend(root)
        #append all the right of root in stackHigh
        self.rightAppend(root)
        low = self.stackLow[-1]
        high = self.stackHigh[-1]
        while low.val<high.val:
            # print(self.stackLow, self.stackHigh)
            currentSum = low.val+high.val
            if currentSum==k:
                return True
            if currentSum<k:
                #append left of low.right
                self.leftAppend(low.right)
                #move left pointer
                low = self.stackLow.pop()
            if currentSum>k:
                #append right of left of high
                self.rightAppend(high.left)
                #move right pointer
                high = self.stackHigh.pop()
        return False


