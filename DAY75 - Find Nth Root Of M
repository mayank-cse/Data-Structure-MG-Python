Problem Statement
You are given two positive integers m and n. Return the values of Nth root of M i.e. M^1/N
Sample Input 1:
3 27
Sample Output 1:
3
Explanation For Sample Input 1:
3rd Root of 27 is 3, as (3)^3 equals 27.
Sample Input 2:
4 69
Sample Output 2:
-1
Explanation For Sample Input 2:
4th Root of 69 is not an integer, hence -1.

**********************************************
Built-in Functions Used
def NthRoot(n: int, m: int) -> int:
    # Write Your Code Here
    x = round(pow(m,1/n))
    if int(pow(x,n)) == m:
        return x
    else:
        return -1
    pass

**********************************************
def helper(n,m,start,end):
    if start>end:
        return -1
    mid = start + (end-start)//2
    temp = pow(mid,n)
    if temp==m:
        return mid
    if temp>m:
        #towards left 
        return helper(n,m,start,mid-1)
    else:
        #towards right
        return helper(n,m,mid+1, end)
    
def NthRoot(n: int, m: int) -> int:
    # Write Your Code Here
    # Our range can be said to be between 1 and m [1,m]
    return helper(n,m,0,m)
    
    pass
