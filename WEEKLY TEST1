6261. Maximum Value of a String in an Array
User Accepted:8422
User Tried:8976
Total Accepted:8680
Total Submissions:12930
Difficulty:Easy
The value of an alphanumeric string can be defined as:

The numeric representation of the string in base 10, if it comprises of digits only.
The length of the string, otherwise.
Given an array strs of alphanumeric strings, return the maximum value of any string in strs.

 

Example 1:

Input: strs = ["alic3","bob","3","4","00000"]
Output: 5
Explanation: 
- "alic3" consists of both letters and digits, so its value is its length, i.e. 5.
- "bob" consists only of letters, so its value is also its length, i.e. 3.
- "3" consists only of digits, so its value is its numeric equivalent, i.e. 3.
- "4" also consists only of digits, so its value is 4.
- "00000" consists only of digits, so its value is 0.
Hence, the maximum value is 5, of "alic3".
Example 2:

Input: strs = ["1","01","001","0001"]
Output: 1
Explanation: 
Each string in the array has value 1. Hence, we return 1.
 

Constraints:

1 <= strs.length <= 100
1 <= strs[i].length <= 9
strs[i] consists of only lowercase English letters and digits.
*****************************************
class Solution:
    def check(self, strs)->int:
        for i in range(0,len(strs)):
            if strs[i].isalpha():
                return 0
        return 1 #//numeric
    def maximumValue(self, strs: List[str]) -> int:
        myList = [*range(0,len(strs),1)]
        
        for i in range(0, len(strs)):
            if(self.check(strs[i])==0):
                myList[i] = len(strs[i])
            else:
                myList[i] = int(strs[i])
        return max(myList)
***************************
***************************
6262. Maximum Star Sum of a Graph
User Accepted:3905
User Tried:5001
Total Accepted:3992
Total Submissions:12710
Difficulty:Medium
There is an undirected graph consisting of n nodes numbered from 0 to n - 1. You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node.

You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

A star graph is a subgraph of the given graph having a center node containing 0 or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.

The image below shows star graphs with 3 and 4 neighbors respectively, centered at the blue node.


The star sum is the sum of the values of all the nodes present in the star graph.

Given an integer k, return the maximum star sum of a star graph containing at most k edges.

 

Example 1:


Input: vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2
Output: 16
Explanation: The above diagram represents the input graph.
The star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4.
It can be shown it is not possible to get a star graph with a sum greater than 16.
Example 2:

Input: vals = [-5], edges = [], k = 0
Output: -5
Explanation: There is only one possible star graph, which is node 0 itself.
Hence, we return -5.
 

Constraints:

n == vals.length
1 <= n <= 105
-104 <= vals[i] <= 104
0 <= edges.length <= min(n * (n - 1) / 2, 105)
edges[i].length == 2
0 <= ai, bi <= n - 1
ai != bi
0 <= k <= n - 1
***************
couldn't do
class Solution:
    def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:
        myset = {}
        myset = set(myset)
        for i in edges:
            myset.add(i[0])
            myset.add(i[1])
        
        # print(myset
              
        mymap = {}
        mymbap = map(mymap)
        for i in edges:
              mymap[i[0]]+=1
        print(mymap[1])
****************************
****************************
2498. Frog Jump II
User Accepted:3210
User Tried:3877
Total Accepted:3383
Total Submissions:6405
Difficulty:Medium
You are given a 0-indexed integer array stones sorted in strictly increasing order representing the positions of stones in a river.

A frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone at most once.

The length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.

More formally, if the frog is at stones[i] and is jumping to stones[j], the length of the jump is |stones[i] - stones[j]|.
The cost of a path is the maximum length of a jump among all jumps in the path.

Return the minimum cost of a path for the frog.

 

Example 1:


Input: stones = [0,2,5,6,7]
Output: 5
Explanation: The above figure represents one of the optimal paths the frog can take.
The cost of this path is 5, which is the maximum length of a jump.
Since it is not possible to achieve a cost of less than 5, we return it.
Example 2:


Input: stones = [0,3,9]
Output: 9
Explanation: 
The frog can jump directly to the last stone and come back to the first stone. 
In this case, the length of each jump will be 9. The cost for the path will be max(9, 9) = 9.
It can be shown that this is the minimum achievable cost.
 

Constraints:

2 <= stones.length <= 105
0 <= stones[i] <= 109
stones[0] == 0
stones is sorted in a strictly increasing order.
class Solution:
    def alternate(self, stones)->int:
        i = 2
        maxj = 0
        #forward
        while(i<len(stones)):
            print(stones[i])
            maxj = max(maxj,abs(stones[i-2]-stones[i]))
            i+=2
        i = i-2
        if(i==len(stones)-1):
            print(stones[i])
            maxj = max(maxj, abs(stones[i] - stones[i-1]))
            i = i-1
        else:
            maxj = max(maxj, abs(stones[i]-stones[i+1]))
            i = i+1
        #return
        i = i - 2
        while(i>0):
            print(stones[i])
            maxj = max(maxj, abs(stones[i]-stones[i+2]))
            i-=2
        i+=2
        if(i!=0):
            maxj = max(maxj, abs(stones[i]-stones[i-1]))
        return maxj
    
    def maxJump(self, stones: List[int]) -> int:
        n = len(stones)
        if(n==1):
            return 0
        if(n==3 or n==2):
            return abs(stones[0] - stones[n-1])
        else:
            return self.alternate(stones)
