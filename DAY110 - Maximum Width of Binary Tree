Given the root of a binary tree, return the maximum width of the given tree.
The maximum width of a tree is the maximum width among all levels.
The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.
It is guaranteed that the answer will in the range of a 32-bit signed integer.

Example 1:
Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).

Example 2:
Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).

Example 3:
Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).
 
Constraints:
The number of nodes in the tree is in the range [1, 3000].
-100 <= Node.val <= 100
***********************************************
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:

        maxWidth = 0
        queue = [[root, 0]]

        while queue:
            nextLevel = []
            width = queue[-1][1] - queue[0][1] + 1
            maxWidth = max(width, maxWidth)

            for root, index in queue:
                
                if root.left:
                    nextLevel.append([root.left, 2*index+1])

                if root.right:
                    nextLevel.append([root.right, 2*index+2])
            
            queue = nextLevel

        return maxWidth
************************************************    
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        if root == None: return 0
        queue = [(root,0)]
        ans = 1
        while queue:
            n = len(queue)
            mini = inf
            temp = []
            for i in range(n):
                mini = min(queue[0][1],mini)
                if queue[0][0].left:
                    queue.append((queue[0][0].left,2*(queue[0][1]-mini)+1))
                    temp.append(2*(queue[0][1]-mini)+1)
                if queue[0][0].right:
                    queue.append((queue[0][0].right,2*(queue[0][1]-mini)+2))
                    temp.append(2*(queue[0][1]-mini)+2)
                queue.pop(0)
            print(temp)
            if temp:
                ans = max(ans, max(temp)-min(temp)+1)
        return ans
