Given the head of a linked list, rotate the list to the right by k places.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]

Constraints:
The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109
**********************************************
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if head == None: return head
        count = 1
        curr = head
        while curr.next:
            curr = curr.next
            count += 1
        curr.next = head
        if k>=count: 
            k = k%count
        n = count - k
        curr = head
        for i in range(n-1):
            curr = curr.next
        temp = curr.next
        curr.next = None
        return temp
