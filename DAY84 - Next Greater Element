Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.
The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

Example 1:
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.

Example 2:
Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]

Constraints:
1 <= nums.length <= 104
-109 <= nums[i] <= 109
*******************************************
class Solution:
    def helper(self, nums, curr, ind):
        while True:
            if ind==len(nums):
                ind = 0
            if nums[ind]>curr:
                return nums[ind]
            ind+=1
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        ans = []
        maxEle = max(nums)
        for i in range(len(nums)):
            if nums[i] == maxEle:
                ans.append(-1)
            else:
                temp = self.helper(nums,nums[i],i+1)
                ans.append(temp)
        return ans
*****************************************
class Solution:
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        stack = []
        ans = []
        i = 2*len(nums)-1
        n = len(nums)
        while i>=0:
            # print(stack,nums[i%n], ans)
            while len(stack)>0 and stack[-1]<=nums[i%n]:
                stack.pop()
            if len(stack) == 0:
                ans.append(-1)
            else:
                ans.append(stack[-1])
            stack.append(nums[i%n])
            i-=1
        # print(nums[len(nums)-1], nums[-1])
        ans = ans[n:]
        return ans[::-1]
    
