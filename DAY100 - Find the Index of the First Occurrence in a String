Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:
Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.

Example 2:
Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.

Constraints:
1 <= haystack.length, needle.length <= 104
haystack and needle consist of only lowercase English characters.
***********************************************
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        for i in range(len(haystack)-len(needle)+1):
            if haystack[i:i+len(needle)] == needle:
                return i
        return -1
***********************************************
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        i = 0
        while i < len(haystack):
            if haystack[i]==needle[0] and len(haystack)-i>=len(needle):
                j = i
                while j-i<len(needle):
                    if haystack[j] == needle[j-i]:
                        print(i,j)
                        j+=1
                    else:
                        break
                if j-i == len(needle):
                    return i
            i+=1
        return -1
*************************************************
TC = O(n+m) - KMP ALGORITHM
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        kmparr = [0]
        left = 0
        right = 1
        while right<len(needle):
            if needle[left]==needle[right]:
                kmparr.append(left+1)
                left+=1
                right+=1
            else:
                if left == 0:
                    kmparr.append(0)
                    right+=1
                left = kmparr[left-1]
                
        print(kmparr)
        k = 0
        i = 0
        while i < len(haystack):
            if k == len(needle):
                return i-k
            print(haystack[i],needle[k])
            if haystack[i] == needle[k]:
                print(i,k)
                i+=1
                k+=1
            else:
                if k!=0:
                    k = kmparr[k-1]
                else:
                    i+=1
        print(k, len(needle))
        if k == len(needle):
            return i-k
        return -1
