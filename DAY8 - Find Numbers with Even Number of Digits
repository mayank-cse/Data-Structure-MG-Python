Given an array nums of integers, return how many of them contain an even number of digits.

Example 1:
Input: nums = [12,345,2,6,7896]
Output: 2
Explanation: 
12 contains 2 digits (even number of digits). 
345 contains 3 digits (odd number of digits). 
2 contains 1 digit (odd number of digits). 
6 contains 1 digit (odd number of digits). 
7896 contains 4 digits (even number of digits). 
Therefore only 12 and 7896 contain an even number of digits.

Example 2:
Input: nums = [555,901,482,1771]
Output: 1 
Explanation: 
Only 1771 contains an even number of digits.
 
Constraints:
1 <= nums.length <= 500
1 <= nums[i] <= 105

Accepted
528.1K

Submissions
685.7K

Acceptance Rate
77.0%
*************************************************
APPROACH - count the number of digits using loop
T.C. - O(N^2)
class Solution:
    def digitCount(self, num) -> int:
        count = 0
        # print(num)
        if(num<0):
            num*= -1
        
        while(num!=0):
            num=num//10
            count=count +1
            # num = (int)num=
            # print(num)
        return count
    def findNumbers(self, nums: List[int]) -> int:
        count = 0
        for i,ele in enumerate(nums):
            digits = self.digitCount(ele)
            # print(ele, digits)
            if digits%2 == 0:
                count+=1
            
        return count
***********************************
APPROACH - math.log10()+1 function
T.N. = O(N)
import math

class Solution:
    def digitCount(self, num) -> int:
        count = 0
        # print(num)
        if(num<0):
            num*= -1
        
        count = math.log10(num)+1
        return math.trunc(count)
    def findNumbers(self, nums: List[int]) -> int:
        count = 0
        for i,ele in enumerate(nums):
            digits = self.digitCount(ele)
            print(ele, digits)
            if digits%2 == 0:
                count+=1
            
        return count
