Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]

Constraints:
1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109
************************************************
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        ans = set()
        n = len(nums)
        
        for i in range(len(nums)-2):
            for j in range(i+1,len(nums)-1):
                d = {}
                for k in range(j+1,len(nums)):
                    sumijk = nums[i]+nums[j]+nums[k]
                    temp = target - sumijk
                    if temp in d:
                        ans.add(tuple(sorted([nums[i],nums[j],nums[k],temp]))) 
                    d[nums[k]]=1
        return ans
**********************************************
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        n = len(nums)
        ans = set()
        for i in range(n-3):
            for j in range(i+1,n-2):
                sumij = nums[i]+nums[j]
                newTarget = target-sumij
                l,m = j+1,n-1
                temp = sorted(nums[j+1:])
                while l<m:
                    if newTarget<temp[l-(j+1)]+temp[m-(j+1)]:
                        m-=1
                    elif newTarget>temp[l-(j+1)]+temp[m-(j+1)]:
                        l+=1
                    else:
                        ans.add(tuple(sorted([nums[i],nums[j],temp[l-(j+1)],temp[m-(j+1)]])))
                        m-=1
                        l+=1
        return sorted(ans)
*******************************************
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        n = len(nums)
        nums = sorted(nums)
        ans = []
        for i in range(n-3):
            if i>0 and nums[i]==nums[i-1]:
                continue
            for j in range(i+1,n-2):
                if j!=(i+1) and nums[j]==nums[j-1]:
                    continue
                sumij = nums[i]+nums[j]
                newTarget = target-sumij
                l,m = j+1,n-1
                temp = nums[j+1:]
                while l<m:
                    if newTarget<temp[l-(j+1)]+temp[m-(j+1)]:
                        m-=1
                    elif newTarget>temp[l-(j+1)]+temp[m-(j+1)]:
                        l+=1
                    else:
                        ans.append(tuple(sorted([nums[i],nums[j],temp[l-(j+1)],temp[m-(j+1)]])))
                        m-=1
                        l+=1
                        while( l<m and nums[l] == nums[l-1]):
                            l+=1
                        while(l<m and nums[m] == nums[m+1]):
                            m-=1
        return sorted(ans)
