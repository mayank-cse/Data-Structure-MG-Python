Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
You must write an algorithm that runs in O(n) time.

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109

************************************************
T.C. - O(N*Log(N))
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        nums = sorted(set(nums))
        maxCount = 0
        if len(nums) == 0: 
            return 0
        count = 1
        print(nums)
        for i in range(1,len(nums)):
            print(nums[i], nums[i-1], count)
            if nums[i] == nums[i-1]+1:
                count+=1
            else:
                if maxCount<count:
                    maxCount = count
                count = 1
            
        if count>maxCount:
            maxCount = count
        return maxCount
**************************************************
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        if len(nums) == 0: return 0
        d = {}
        for i in range(len(nums)):
            d[nums[i]] = 1
        
        count = 1
        maxCount = 0
        for i in range(len(nums)):
            j = nums[i]
            if j-1 not in d:
                while j+1 in d:
                    count+=1
                    d[j+1] = None
                    j+=1
                # print(nums[i],nums[i]-1,nums[i]+1,count, maxCount)
            if count>maxCount:
                maxCount = count
            count =1
        if maxCount<count:
            maxCount = count
        return maxCount
