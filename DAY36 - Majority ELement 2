Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
Input: nums = [1]
Output: [1]

Example 3:
Input: nums = [1,2]
Output: [1,2]
 
Constraints:
1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109

Follow up: Could you solve the problem in linear time and in O(1) space?
*************************************************MOORE'S VOTING ALGORITHM
class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        counter1, ele1 = 0,0
        counter2, ele2 = 0,0
        ans = []
        for ele in nums:
            if counter1 == 0 and ele!=ele2:
                ele1 = ele
                counter1 = 1
            elif counter2 == 0 and ele!= ele1:
                ele2 = ele
                counter2 = 1
            elif ele1 == ele:
                counter1+=1
            elif ele2 == ele:
                counter2+=1
            else:
                counter1-=1
                counter2-=1
            
        count1 = 0
        count2 = 0
        for num in nums:
            if num == ele1:
                count1 += 1
            elif num == ele2:
                count2 += 1
        ans = []
        if count1 > len(nums)/3:
            ans.append(ele1)
        if count2 > len(nums)/3:
            ans.append(ele2)
            
        return ans
