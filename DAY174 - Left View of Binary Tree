Given a Binary Tree, return Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The task is to complete the function leftView(), which accepts root of the tree as argument.

Left view of following tree is 1 2 4 8.

          1
       /     \
     2        3
   /     \    /    \
  4     5   6    7
   \
     8   

Example 1:

Input:
   1
 /  \
3    2
Output: 1 3

Example 2:

Input:

Output: 10 20 40
Your Task:
You just have to complete the function leftView() that returns an array containing the nodes that are in the left view. The newline is automatically appended by the driver code.
Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
0 <= Number of nodes <= 100
1 <= Data of a node <= 1000

**********************************************
#Function to return a list containing elements of left view of the binary tree.
def LeftView(root):
    
    # code here
    curr = root
    queue = [curr]
    ans = []
    while queue:
        n = len(queue)
        
        for i in range(n):
            curr = queue.pop(0)
            if curr is None:
                break
            if i==0:
                ans.append(curr.data)
            if curr.left is not None:
                queue.append(curr.left)
            if curr.right is not None:
                queue.append(curr.right)
    return ans
********************************************

#Function to return a list containing elements of left view of the binary tree.
def LeftView(root):
    
    # code here
    def helper(curr,level,res):
        if curr is None:
            return
        if len(res) == level:
            res.append(curr.data)
        helper(curr.left, level+1, res)
        helper(curr.right, level+1, res)
    res = []
    helper(root,0,res)
    return res
   
