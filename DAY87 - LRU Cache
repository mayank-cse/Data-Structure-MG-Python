Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.
Implement the LRUCache class:
LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

Example 1:
Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 
Constraints:
1 <= capacity <= 3000
0 <= key <= 104
0 <= value <= 105
At most 2 * 105 calls will be made to get and put.
************************************************************
class LRUCache:

    def __init__(self, capacity: int):
        self.dictionary = {}
        self.size = capacity
        self.queue = deque()

    def get(self, key: int) -> int:
        if key in self.dictionary:
            self.queue.remove(key)
            self.queue.append(key)
            return self.dictionary[key]
        else:
            return -1
    def put(self, key: int, value: int) -> None:
        if key in self.dictionary:
            self.dictionary[key] = value
            self.queue.remove(key)
            self.queue.append(key)
        else:
            if len(self.dictionary)>=self.size:
                del self.dictionary[self.queue.popleft()]
            self.dictionary[key] = value
            self.queue.append(key)



# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
*********************************************************
class DoubleLinkedNode():
    def __init__(self):
        self.key = 0
        self.value = 0
        self.prev = None
        self.next = None

class LRUCache:

    def __init__(self, capacity: int):
        self.size = 0
        self.capacity = capacity
        self.cache = dict()
        self.head = DoubleLinkedNode()
        self.tail = DoubleLinkedNode()
        self.head.next = self.tail
        self.tail.prev = self.head

    def get(self, key: int) -> int:
        if key in self.cache:
            node = self.cache[key]
            # remove from linkedlist
            prev = node.prev
            new = node.next

            prev.next = new
            new.prev = prev
            # add into linked list
            second = self.head.next
            node.next = second
            second.prev = node
            node.prev = self.head
            self.head.next = node

            return node.value
        return -1

    def put(self, key: int, value: int) -> None:
        node = self.cache.get(key)
        if node:
            node.value = value
            # remove from linkedlist
            prev = node.prev
            new = node.next

            prev.next = new
            new.prev = prev
            # add into linked list
            second = self.head.next
            node.next = second
            second.prev = node
            node.prev = self.head
            self.head.next = node
        else:
            self.size += 1
            node = DoubleLinkedNode()
            node.key = key
            node.value = value
            self.cache[key] = node
            # add into linked list
            second = self.head.next
            node.next = second
            second.prev = node
            node.prev = self.head
            self.head.next = node

            if self.size > self.capacity:
                self.size -= 1
                del self.cache[self.tail.prev.key]
                self.tail.prev = self.tail.prev.prev
                self.tail.prev.next = self.tail


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
***************************************************
class ListNode:
    def __init__(self):
        self.key = None
        self.value = None
        self.next = None
        self.prev = None
class LRUCache:

    def __init__(self, capacity: int):
        self.head = ListNode()
        self.tail = ListNode()
        self.head.next = self.tail
        self.tail.prev = self.head
        self.capacity = capacity
        self.cache = {}
    
    def remove(self, curr):
        tempPrev = curr.prev
        tempNext = curr.next
        tempPrev.next = tempNext
        tempNext.prev = tempPrev

    def insert(self, k, val, head):
        curr = head
        tempNext = curr.next
        newNode = ListNode()
        curr.next = newNode
        newNode.next = tempNext
        tempNext.prev = newNode
        newNode.prev = curr
        newNode.key = k
        newNode.value = val

        return newNode

    def get(self, key: int) -> int:
        if key in self.cache:
            #we need to put it at first
            curr = self.cache[key]
            val = curr.value
            self.remove(curr)
            self.cache[key] = self.insert(key, val, self.head)
            return val
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            curr = self.cache[key]
            self.remove(curr)
            self.cache[key] = self.insert(key, value, self.head)
            
        else:
            if len(self.cache)>=self.capacity:
                # print(self.cache,self.tail.prev.key)
                del self.cache[self.tail.prev.key]
                self.remove(self.tail.prev)
            self.cache[key] = self.insert(key, value, self.head)
            # print(self.cache)


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
