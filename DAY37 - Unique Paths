***************************************************
BRUTE FORCE - Traversing all the paths
class Solution:
    def helper(self,m, n, x,y):
        if x==m-1 and y == n-1:
            return 1
        if x>=m or y>=n:
            return 0 
        count = self.helper(m,n,x+1,y)+self.helper(m,n,x,y+1)
        return count
    def uniquePaths(self, m: int, n: int) -> int:
        return self.helper(m,n,0,0)
        
***************************************************
T.C. = O(N*M), S.C. = O(N*M)
class Solution:
    def helper(self,m, n, x,y,grid):
        if x==m-1 and y ==n-1:
            return 1
        if x>=m or y>=n:
            return 0 
        if grid[x][y]!=0:
            return grid[x][y]
        print(grid)
        grid[x][y] = (self.helper(m,n,x+1,y,grid)+self.helper(m,n,x,y+1,grid))
        return grid[x][y]
    def uniquePaths(self, m: int, n: int) -> int:
        grid = [[0 for i in range(n)] for i in range(m)]
        return self.helper(m,n,0,0,grid)
***************************************************
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        # No. of possible paths to choose from is (m-1) + (n-2) = m+n-2
        n = m+n-2
        r = m-1
        #combination is nCr = n!/r!*(n-r)!
        ans = 1
        n = [i for i in range(n,n-r,-1)]
        for i in n:
            ans = ans*i
        numerator,ans = ans,1
        d = [i for i in range(r,0,-1)]
        for i in d:
            ans = ans*i
        denominator,ans = ans,1
        print(numerator, denominator)
        return int(numerator/denominator)
