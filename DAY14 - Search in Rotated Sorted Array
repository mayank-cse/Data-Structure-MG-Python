There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1
 
Constraints:
1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104
Accepted - 1.9M
Submissions - 4.9M
Acceptance Rate - 38.9%
********************************************
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        for index,num in enumerate(nums):
            print(num, index)
            if num==target:
                return index
     
        return -1
        
********************************************
class Solution:
    def findFirst(self, nums, start, end, flag)->int:
        mid = start + (end-start)//2
        print(start, mid, end)
        if(start>end):
            return 0
        if(nums[mid]>nums[start] and nums[mid]>nums[end]): 
            # dono se bda h mtlb right side mein hoga
            return self.findFirst(nums,mid+1,end, 0)
        elif(nums[mid]<nums[start] and nums[mid]<nums[end]):
            #dono se chota h matlab left mein hoga
            return self.findFirst(nums,start, mid, 1)
        elif(nums[mid]>=nums[start] and nums[mid]<=nums[end]):
            if(flag == 0):
                return start
            if(flag==1):
                return end
        elif(nums[mid]>=nums[start] and nums[mid]>=nums[end]):
            return end
        return 0
    def findTarget(self, nums, start, end, target)->int:
        mid = start + (end-start)//2
        print(start, mid, end)
        if(nums[mid] == target):
            return mid
        if(start>=end):
            return -1
        if(nums[mid] < target):
            return self.findTarget(nums,mid+1,end,target)
        elif(nums[mid]>target):
            return self.findTarget(nums, start, mid-1, target)
        else:
            return mid
    def search(self, nums: List[int], target: int) -> int:
        dip = self.findFirst(nums, 0, len(nums)-1, 0)
        #return nums[dip]
        print("dip = ",dip)
        start = 0
        end = len(nums)-1
        if(nums[dip]==target):
            return dip
        if target>=nums[dip] and target<=nums[end]:
            return self.findTarget(nums, dip+1,end, target)
        
        elif nums[dip-1]!=None and target<=nums[dip-1] and target>=nums[start]:
            return self.findTarget(nums, start, dip-1,target)
        return -1
