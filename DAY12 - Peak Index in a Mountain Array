An array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.

Example 1:
Input: arr = [0,1,0]
Output: 1

Example 2:
Input: arr = [0,2,1,0]
Output: 1

Example 3:
Input: arr = [0,10,5,2]
Output: 1
 
Constraints:
3 <= arr.length <= 105
0 <= arr[i] <= 106
arr is guaranteed to be a mountain array.
***********************************************
# Brute force - linear Search
TC - O(N)
***
class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        i = 0
        while(arr[i]<arr[i+1]):
            i+=1
        return i
***************************************
#Optimized - Binary Search
TC - O(log(N))
***
class Solution:
    def binarySearch(self, arr, start, end)->int:
        mid = start + (end-start)//2
        if start>=end:
            return -1 # arr is not mounted 
        if arr[mid]>arr[mid+1] and arr[mid]<arr[mid-1]:
            return self.binarySearch(arr,start,mid)
        elif arr[mid]>arr[mid-1] and arr[mid]<arr[mid+1]:
            return self.binarySearch(arr,mid, end)
        else:
            return mid
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        return self.binarySearch(arr, 0, len(arr)-1)
