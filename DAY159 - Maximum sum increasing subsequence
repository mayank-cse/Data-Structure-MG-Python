Given an array of n positive integers. Find the sum of the maximum sum subsequence of the given array such that the integers in the subsequence are sorted in strictly increasing order i.e. a strictly increasing subsequence. 

Example 1:

Input: N = 5, arr[] = {1, 101, 2, 3, 100} 
Output: 106
Explanation:The maximum sum of a
increasing sequence is obtained from
{1, 2, 3, 100}
Example 2:

Input: N = 3, arr[] = {1, 2, 3}
Output: 6
Explanation:The maximum sum of a
increasing sequence is obtained from
{1, 2, 3}

Your Task:  
You don't need to read input or print anything. Complete the function maxSumIS() which takes N and array arr as input parameters and returns the maximum value.


Expected Time Complexity: O(N2)
Expected Auxiliary Space: O(N)


Constraints:
1 ≤ N ≤ 103
1 ≤ arr[i] ≤ 105
***************************************
#User function Template for python3
from bisect import bisect_left
class Solution:
	def maxSumIS(self, Arr, n):
        msis = [0]*n
        for i in range(n):
            msis[i] = Arr[i]
            for j in range(i):
                if Arr[i] > Arr[j] and Arr[i] + msis[j] >= msis[i]:
                    msis[i] = Arr[i] + msis[j]
        return max(msis)
        
