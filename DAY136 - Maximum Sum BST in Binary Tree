Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Example 1:
Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
Output: 20
Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.

Example 2:
Input: root = [4,3,null,1,2]
Output: 2
Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.

Example 3:
Input: root = [-4,-2,-5]
Output: 0
Explanation: All values are negatives. Return an empty BST.

Constraints:
The number of nodes in the tree is in the range [1, 4 * 104].
-4 * 104 <= Node.val <= 4 * 104
*************************************************
O(N^3)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.maxSum = 0
        self.sumi = 0
    def sumBST(self, root):
        if not root:
            return
        self.sumBST(root.left)
        self.sumi += root.val
        self.sumBST(root.right)
        return
    def validBST(self, root,lowerBound, upperBound):
        if not root:
            return True
        if root.val>=upperBound or root.val<=lowerBound:
            return False
        if not self.validBST(root.left, lowerBound, root.val):
            return False
        return self.validBST(root.right, root.val, upperBound)
        

    def maxSumBST(self, root: Optional[TreeNode]) -> int:
        
        if not root:
            return 0
        if self.validBST(root,-inf, inf):
            self.sumi = 0
            self.sumBST(root)
            self.maxSum = max(self.sumi,self.maxSum)
        x,y = 0,0
        if root.left:
            self.maxSumBST(root.left)
        if root.right:
            self.maxSumBST(root.right)
        return self.maxSum
*********************************************************
O(N^2)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.maxSum = 0
        self.sumi = 0
    # def sumBST(self, root):
    #     if not root:
    #         return
    #     self.sumBST(root.left)
    #     self.sumi += root.val
    #     self.sumBST(root.right)
    #     return
    def validBST(self, root,lowerBound, upperBound):
        if not root:
            return True
        if root.val>=upperBound or root.val<=lowerBound:
            return False
        if not self.validBST(root.left, lowerBound, root.val):
            return False
        self.sumi += root.val
        return self.validBST(root.right, root.val, upperBound)
        

    def maxSumBST(self, root: Optional[TreeNode]) -> int:
        
        if not root:
            return 0
        self.sumi = 0
        if self.validBST(root,-inf, inf):
            # self.sumi = 0
            self.maxSum = max(self.sumi,self.maxSum)
        x,y = 0,0
        if root.left:
            self.maxSumBST(root.left)
        if root.right:
            self.maxSumBST(root.right)
        return self.maxSum
***************************************************
O(N)
********
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxSumBST(self, root: Optional[TreeNode]) -> int:
        self.ans = 0
        def helper(root):
            if not root:
                return True, [float('inf'), float('-inf')], 0
            
            l, l_range, l_sum = helper(root.left)
            r, r_range, r_sum = helper(root.right)

            if l and r and l_range[1] < root.val < r_range[0]:
                total = l_sum + r_sum + root.val
                self.ans = max(self.ans, total)
                return True, [min(l_range[0],root.val), max(r_range[1],root.val)], total
            return False, [float('inf'), float('-inf')], 0
        _,_,_ = helper(root)
        return self.ans
     
