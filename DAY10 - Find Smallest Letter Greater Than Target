You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.
Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.

Example 1:
Input: letters = ["c","f","j"], target = "a"
Output: "c"
Explanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.

Example 2:
Input: letters = ["c","f","j"], target = "c"
Output: "f"
Explanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.

Example 3:
Input: letters = ["x","x","y","y"], target = "z"
Output: "x"
Explanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].

Constraints:
2 <= letters.length <= 104
letters[i] is a lowercase English letter.
letters is sorted in non-decreasing order.
letters contains at least two different characters.
target is a lowercase English letter.
Accepted 273.9K
Submissions 604K
Acceptance Rate 45.4%
**************************************************
class Solution:
    def binarySearch(self, letter, start, end, target)->int:
        mid = start + (end-start)//2
        print(start, end,mid)
        if(start>=end or mid == 0):
            if letter[mid] == target and mid+1<=len(letter)-1:
                return mid+1    
            if letter[mid]>target and letter[mid]!=None:
                return mid
            elif letter[mid]<target and mid+1 <= len(letter)-1:
                # print(mid+1)
                if letter[mid+1]==target:
                    return mid + 2
                return mid+1
            else:
                return 0
        # if letter[mid] == target:
        #     return self.binarySearch(letter, mid+1,end, target)
        elif letter[mid]<=target:
            return self.binarySearch(letter, mid+1, end, target)
        elif letter[mid]>target:
            return self.binarySearch(letter, start, mid-1, target)
        else:
            if letter[mid]:
                return mid
            else:
                return 0
    def nextGreatestLetter(self, letters: List[str], target: str) -> str:
        res = [ord(i) for i in letters]
        print(res)
        l = len(res)-1
        index = self.binarySearch(res, 0, l, ord(target))

        return letters[index]
