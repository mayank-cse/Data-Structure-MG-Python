Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

Constraints:
1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
****************************************************
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        prod = 1
        maxLeft = nums[0]
        maxRight = nums[0]
        zeroPresent = False
        for i in range(0, len(nums)):
            if nums[i] == 0:
                prod = 1
                zeroPresent = True
                continue
            prod = prod*nums[i]
            maxLeft = max(prod, maxLeft)
        prod = 1
        for i in range(len(nums)-1,-1,-1):
            if nums[i] == 0:
                prod = 1
                zeroPresent = True
                continue
            prod = prod*nums[i]
            maxRight = max(prod, maxRight)
        if zeroPresent:
            return max(max(maxLeft, maxRight),0)
        return max(maxLeft, maxRight)
**************************************************
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        result = nums[0]
        prod1 = nums[0] #current prod
        prod2 = nums[0] #minimum till now
        for i in range(1,len(nums)):
            temp = max(max(prod1*nums[i], prod2*nums[i]),nums[i])
            prod2 = min(min(prod1*nums[i], prod2*nums[i]), nums[i])
            prod1 = temp
            result = max(prod1,result)
        return result 
        
