You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
Return the single element that appears only once.
Your solution must run in O(log n) time and O(1) space.

Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10

Constraints:
1 <= nums.length <= 105
0 <= nums[i] <= 105
****************************************
class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        start = 0
        # if len(nums)==1: return nums[0]
        while start<len(nums):
            if start+1<len(nums) and nums[start] == nums[start+1]:
                start +=2
            else:
                return nums[start]
        return -1
****************************************   
class Solution:
    def binarySearch(self, nums, start, end)->int:
        mid = start + (end-start)//2
        print(start, mid, end)
        if(start>end):
            return -1
        if(mid+1>=len(nums) ):
            if(nums[mid]==nums[mid-1]):
                return -1
            else:
                return nums[mid]
        if(mid-1<0):
            if(nums[mid]==nums[mid+1]):
                return -1
            else:
                return nums[mid]
        if(nums[mid]!=nums[mid-1] and nums[mid]!=nums[mid+1]):
            return nums[mid]
        else:
            if(nums[mid]!=nums[mid+1] and mid%2==0 or nums[mid]==nums[mid+1] and mid%2!=0):#Odd
                return self.binarySearch(nums,start,mid)
            elif(nums[mid]==nums[mid+1] and mid%2==0 or nums[mid]!=nums[mid+1] and mid%2!=0):
                return self.binarySearch(nums, mid+1, end)
                
        return -1
    def singleNonDuplicate(self, nums: List[int]) -> int:
        if len(nums)==1:
            return nums[0]
        print(nums)
        return self.binarySearch(nums, 0, len(nums)-1)
***********************************************
class Solution:
    def binarySearch(self, nums, start, end) -> int:
        mid = start + (end-start)//2
        # print(start, mid, end)
        #Base case
        if(start>end):
            return -1
        
        #Edge Case
        if(mid>=len(nums)):
            if(nums[mid-1]==nums[mid]):
                return -1
            else:
                return nums[mid]
        
        if(mid<0):
            if(nums[mid+1]==nums[mid]):
                return -1
            else:
                return nums[mid]
        if(start==end):
            return nums[start]
        #Target Case
        if(nums[mid]!=nums[mid-1] and nums[mid]!=nums[mid+1]):
            return nums[mid]
        #if it's on left side
        if(nums[mid]!=nums[mid+1] and mid%2==0 or nums[mid]==nums[mid+1] and mid%2!=0):
            return self.binarySearch(nums, start, mid)
        #if right side
        if(nums[mid]!=nums[mid+1] and mid%2!=0 or nums[mid]==nums[mid+1] and mid%2==0):
            return self.binarySearch(nums, mid+1, end)

        return -1
    def singleNonDuplicate(self, nums: List[int]) -> int:
        if(len(nums)==1):
            return nums[0]
        return self.binarySearch(nums,0,len(nums)-1)
