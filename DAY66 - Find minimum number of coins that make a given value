Given a value V, if we want to make a change for V cents, and we have an infinite supply of each of C = { C1, C2, .., Cm} valued coins, what is the minimum number of coins to make the change? If itâ€™s not possible to make a change, print -1.

Examples:
Input: coins[] = {25, 10, 5}, V = 30
Output: Minimum 2 coins required We can use one coin of 25 cents and one of 5 cents 

Input: coins[] = {9, 6, 5, 1}, V = 11
Output: Minimum 2 coins required We can use one coin of 6 cents and 1 coin of 5 cents

This problem is a variation of the problem discussed Coin Change Problem. Here instead of finding the total number of possible solutions, we need to find the solution with the minimum number of coins.
The minimum number of coins for a value V can be computed using the below recursive formula.
******************************************************************
BRUTE FORCE - Combination Sum Technique - All combination for the given sum generated and minimum length found
class Solution:
    def helper(self, coins, ind, subset, output, V):
        if V == 0:
            # print(subset)
            output.append(subset)
            return
        if ind>=len(coins) or V<0:
            return
        self.helper(coins, ind, subset+[coins[ind]], output,V-coins[ind])
        self.helper(coins, ind+1, subset, output,V)
        
	def minCoins(self, coins, M, V):
		# code here
        output = []
        self.helper(coins, 0, [], output, V)
        minLen = 9999
        if output == []: return -1
        for i in output:
            minLen = min(minLen,len(i))
            # print(minLen, i)
        
        return minLen
