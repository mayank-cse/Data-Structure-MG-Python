Given a string s, return the longest palindromic substring in s.

Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"
 
Constraints:
1 <= s.length <= 1000
s consist of only digits and English letters.
*************************************************
class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ""
        maxRes = -inf
        for i in range(len(s)):
            # if i is the middle
            left = i
            right = i
            while left>=0 and right<len(s) and s[left]==s[right]:
                left-=1
                right+=1
            count = right-left - 2
            if count>maxRes:
                res = s[left+1: right]
                maxRes = count
            # Even Length
            left = i
            right = i+1
            while left>=0 and right<len(s) and s[left]==s[right]:
                left-=1
                right+=1
            count = right - left -2
            if count>maxRes:
                res = s[left+1: right]
                maxRes = count
            
        return res
            
