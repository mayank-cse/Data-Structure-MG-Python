Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

Example 1:
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

Example 2:
Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 
Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200
****************************************
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        def helper(row, col, grid,m,n):
            if row == m-1 and col == n-1:
                return grid[row][col]
                
            ans = float('inf')
            if row+1<m:
                ans = min(ans,grid[row][col]+helper(row+1, col, grid, m, n))
            if col+1<n:
                ans = min(ans,grid[row][col]+helper(row,col+1, grid, m,n))
            return ans

        return helper(0,0,grid,len(grid), len(grid[0]))
******************************************
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        dp = {}
        def helper(row, col, grid,m,n):
            if row == m-1 and col == n-1:
                return grid[row][col]
            if (row, col) in dp:
                return dp[(row,col)]
            ans = float('inf')
            if row+1<m:
                ans = min(ans,grid[row][col]+helper(row+1, col, grid, m, n))
            if col+1<n:
                ans = min(ans,grid[row][col]+helper(row,col+1, grid, m,n))
            dp[(row, col)] = ans
            return ans

        return helper(0,0,grid,len(grid), len(grid[0]))
*****************************************TABULATION
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        n = len(grid)
        m = len(grid[0])
        dp = [[-1 for _ in range(m)] for _ in range(n)]
        for row in range(n):
            for col in range(m):
                if row==0 and col==0:
                    dp[row][col] = grid[row][col]
                else:
                    down = grid[row][col]
                    if row>0:
                        down += dp[row-1][col]
                    else:
                        down += int(1e9)
                    right = grid[row][col]
                    if col>0:
                        right += dp[row][col-1]
                    else:
                        right += int(1e9)
                    dp[row][col] = min(down, right)
        
        return dp[n-1][m-1]  

        
