3. Longest Substring Without Repeating Characters
Medium
30.7K
1.3K
Companies
Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
Accepted
4.1M
Submissions
12.1M
Acceptance Rate
33.8%
***********************************************
APPROACH
Step 1 - Create a list and append the first element
Step 2 - Iterate the list
Step 3 - Append elements if the element does not exist
Step 4 - if the element exists, pop till the element is removed
***********************************************
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        i = 1
        if(len(s)==0):
            return 0
        myList = []
        myList.append(s[0])
        maxl = 0
        while(i<len(s)):
            if s[i] not in myList:
                myList.append(s[i])
                i+=1
            else:
                maxl = max(maxl, len(myList))
                myList.pop(0)
        return max(maxl,len(myList))
