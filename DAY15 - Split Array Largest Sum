Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.
Return the minimized largest sum of the split.
A subarray is a contiguous part of the array.

Example 1:
Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.

Example 2:
Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.
 
Constraints:
1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= k <= min(50, nums.length)
Accepted - 252.1K
Submissions - 471.9K
Acceptance Rate - 53.4%

***********************************************************
class Solution:
    def binarySearch(self, nums, start, end, pieces)->int:
        mid = start+ (end-start)//2
        print(start,end, mid)
        count = 1
        sum = 0
        S = []
        for i in nums:
            sum += i
            if(sum>mid):
                count+=1
                S.append(sum-i)
                sum = i
        S.append(sum)
        print(S)
        if(start == end and start == mid):
            return mid
        
        if(count>pieces):
            # mid+=1
            return self.binarySearch(nums, mid+1, end, pieces)
        if(count<=pieces):
            # mid-=1
            return self.binarySearch(nums, start,mid, pieces)
        else:
            return max(S)
    def splitArray(self, nums: List[int], k: int) -> int:
        minVal = max(nums)
        maxVal = sum(nums)
        print(minVal, maxVal)
        return self.binarySearch(nums,minVal, maxVal, k)
