Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 
Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
 
Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
************************************************
**********KADANES ALGORITHM************
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max, sum = -99999999, 0
        start, end = 0,0
        ans = []
        for i,ele in enumerate(nums):
            sum = sum + ele
            if sum>max:
                max = sum
                ans.append((start,end,sum))
            if(sum<0):
                start = i+1
                end = i+1
                sum = 0
            else:
                end = end+1
        print(ans)
        return max
