Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3

Constraints:
The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104

Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?
*********************************************
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderHelper(self,root,inorder):
        if not root:
            return
        self.inorderHelper(root.left, inorder)
        inorder.append(root.val)
        self.inorderHelper(root.right, inorder)
        return 
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        inorder = []
        self.inorderHelper(root, inorder)
        return inorder[k-1]
*********************************************
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.count = 0
    def inorderHelper(self,root,ans,count,k):
        if not root:
            return
        self.inorderHelper(root.left,ans,self.count, k)
        self.count+=1
        if self.count == k:
            ans[0] = root.val
        self.inorderHelper(root.right,ans, self.count, k)
        return
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        ans = [0]
        self.inorderHelper(root,ans,0,k)
        return ans[0]
       
