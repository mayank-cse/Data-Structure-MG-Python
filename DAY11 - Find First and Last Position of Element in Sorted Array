Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity. 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

Accepted - 1.4M
Submissions - 3.5M
Acceptance Rate - 41.8%
********************************************************
class Solution:
    def binarySearch(self, nums, start, end, target, flag) -> int:
        mid = start + (end-start)//2
        print(start, mid, end,target)
        if start==mid and nums[start]==target:
            print(start,target)
            if(nums[end]==target and flag == 1):
                return end
            if(nums[start] == target):
                return start
            else:
                return -1
    
        if(start>end):
            return -1
        if(nums[mid]>target):
            return self.binarySearch(nums,start,mid-1,target,flag)
        elif(nums[mid]<target):
            return self.binarySearch(nums,mid+1,end, target, flag)
        else:
            #now if mid is equal to target
            if flag == 0: #i.e. first occurence
                return self.binarySearch(nums,start,mid,target,flag)
            else: #i.e. second occurence
                return self.binarySearch(nums, mid, end, target, flag)
            
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        ans = self.binarySearch(nums, 0, len(nums)-1, target, 0), self.binarySearch(nums,0,len(nums)-1,target,1)
        return ans
