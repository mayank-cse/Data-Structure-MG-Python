Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.
Note that the same word in the dictionary may be reused multiple times in the segmentation.

Example 1:
Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]

Example 2:
Input: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]
Output: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]
Explanation: Note that you are allowed to reuse a dictionary word.

Example 3:
Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: []
 
Constraints:
1 <= s.length <= 20
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 10
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.
Input is generated in a way that the length of the answer doesn't exceed 105.
*************************************************
class Solution:
    def helper(self, s, dictionary, ind, combination, output):
        if ind == len(s):
            output.append(combination)

        if ind>=len(s):
            return

        temp = ""

        while ind<len(s):
            temp+=s[ind]
            if temp in dictionary:
                print(combination, temp)
                self.helper(s, dictionary, ind+1, (combination+" "+temp).strip(), output)
            ind+=1
    
    def wordBreak(self, s: str, dictionary: List[str]) -> List[str]:
         # Write your code here
        output = []

        self.helper(s, dictionary,0, "", output)
        # if len(output) == 0: return -1
        return output
