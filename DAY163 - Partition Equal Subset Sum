Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.

Constraints:
1 <= nums.length <= 200
1 <= nums[i] <= 100
*****************************************
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        def helper(idx, set1, set2, nums):
            # print(set1, set2)
            if idx == len(nums) and set1==set2:
                return True
            if idx == len(nums) and set1!=set2:
                return False
            # add in set1
            if helper(idx+1, set1+nums[idx], set2, nums):
                return True
            # add in set2
            return helper(idx+1, set1, set2+nums[idx], nums)

        return helper(0, 0, 0, nums)
****************************************
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        def helper(idx, sumIdx, nums):
            # print(idx, sumIdx)
            if sumIdx == 0:
                return True
            if idx >= len(nums) or sumIdx<0:
                return False
            pick, notPick = False, False
            notPick = helper(idx+1, sumIdx, nums)
            if nums[idx]<=sumIdx:
                pick = helper(idx+1, sumIdx-nums[idx], nums)
            return pick or notPick
        sumEle = 0
        for i in nums:
            sumEle += i
        if sumEle%2!=0: return False

        return helper(0, sumEle//2, nums)
***************************************
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        dp = {}
        def helper(idx, sumIdx, nums):
            if sumIdx == 0:
                return True
            if idx >= len(nums) or sumIdx<0:
                return False
            if (idx, sumIdx) in dp:
                return dp[(idx, sumIdx)]
            pick, notPick = False, False
            notPick = helper(idx+1, sumIdx, nums)
            if nums[idx]<=sumIdx:
                pick = helper(idx+1, sumIdx-nums[idx], nums)
            dp[(idx, sumIdx)] = pick or notPick
            return pick or notPick

        sumEle = sum(nums)
        if sumEle%2!=0: return False

        return helper(0, sumEle//2, nums)
********************************************
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        def helper(idx, sumIdx, nums, dp):
            if sumIdx == 0:
                return True
            if idx >= len(nums) or sumIdx<0:
                return False
            if (idx, sumIdx) in dp:
                return dp[(idx, sumIdx)]
            pick, notPick = False, False
            notPick = helper(idx+1, sumIdx, nums, dp)
            if nums[idx]<=sumIdx:
                pick = helper(idx+1, sumIdx-nums[idx], nums, dp)
            dp[(idx, sumIdx)] = pick or notPick
            return pick or notPick

        sumEle = sum(nums)
        if sumEle%2!=0: return False

        dp = {}
        return helper(0, sumEle//2, nums, dp)
*********************************************
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        def helper(idx, sumIdx, nums, dp):
            if sumIdx == 0:
                return True
            if idx >= len(nums) or sumIdx<0:
                return False
            if dp[idx][sumIdx]!=-1:
                return dp[idx][sumIdx]
            pick, notPick = False, False
            notPick = helper(idx+1, sumIdx, nums, dp)
            if nums[idx]<=sumIdx:
                pick = helper(idx+1, sumIdx-nums[idx], nums, dp)
            dp[idx][sumIdx] = pick or notPick
            return pick or notPick

        sumEle = sum(nums)
        if sumEle%2!=0: return False

        dp = [[-1]*(sumEle//2+1) for _ in range(len(nums))]
        return helper(0, sumEle//2, nums, dp)
            
            
            
            
