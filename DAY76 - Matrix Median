Problem Description
 
Given a matrix of integers A of size N x M in which each row is sorted.
Find and return the overall median of matrix A.
NOTE: No extra memory is allowed.
NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.

Problem Constraints
1 <= N, M <= 10^5
1 <= N*M <= 10^6
1 <= A[i] <= 10^9
N*M is odd

Input Format
The first and only argument given is the integer matrix A.

Output Format
Return the overall median of matrix A.

Example Input
Input 1: 
A = [   [1, 3, 5],
        [2, 6, 9],
        [3, 6, 9]   ] 
Input 2: 
A = [   [5, 17, 100]    ]

Example Output
Output 1: 
 5 
Output 2: 
 17

Example Explanation
Explanation 1: 
A = [1, 2, 3, 3, 5, 6, 6, 9, 9]
Median is 5. So, we return 5. 

Explanation 2:
Median is 17.
******************************************************
OPTIMAL APPROACH - Binary Search
class Solution:
	# @param A : list of list of integers
	# @return an integer
	def BSCounter(self, arr, target, start, end):
		if start>end:
			return start
		mid = start + (end-start)//2
		if arr[mid] <= target:
			return self.BSCounter(arr,target, mid+1, end)
		else:
			return self.BSCounter(arr,target, start, mid-1)
		return start

	def helper(self, A, n, m, start, end):
		if start>end:
			return start
		mid = (start + end) // 2
		# print(start,end,mid)
		count = 0
		for i in range(n):
			count += self.BSCounter(A[i],mid,0, m-1)
		if count <= (n*m)/2:
			return self.helper(A,n,m,mid+1, end)
		else:
			return self.helper(A,n,m,start,mid-1)

        
	def findMedian(self, A):
		return int(self.helper(A,len(A), len(A[0]), 1, 1e09))
