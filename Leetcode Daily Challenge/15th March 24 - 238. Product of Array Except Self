Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)
*************************************
class Solution:
    def helper(self, ind,nums):
        ans = 1
        for i in range(len(nums)):
            if i == ind:
                continue
            ans *= nums[i]
        return ans
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        ans = []
        prod = 1
        for num in nums:
            prod *= num

        ans = [prod//ele if ele != 0 else self.helper(ind,nums) for ind,ele in enumerate(nums)]
        return ans
**************************************
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        if nums.count(0)>=2:
            return [0]*len(nums)
        prodwithzero = 1
        prodwithoutzero = 1
        for ele in nums:
            prodwithzero *= ele
            prodwithoutzero *= ele if ele != 0 else 1
        return [prodwithzero//ele if ele!=0 else prodwithoutzero for ele in nums]
