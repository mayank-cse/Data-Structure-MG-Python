class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp = [[-1 for _ in range(n+1)] for _ in range(m+1)]
        def helper(row, col):
            if row == m-1 and col == n-1 and obstacleGrid[row][col]!=1:
                return 1
            if row >= m or col>= n or obstacleGrid[row][col] == 1:
                return 0
            if dp[row][col]!=-1:
                return dp[row][col]
            opt = [(+1, 0), (0,+1)]
            ans = 0
            for x,y in opt:
                if row+x<m and col+y<n:
                    ans += helper(row+x, col+y)
            dp[row][col] = ans
            return ans
        return helper(0,0)
*************************************************
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]
        
        # Initialize the first cell as 1 if it's not an obstacle, otherwise, no path is possible
        dp[0][0] = 1 if obstacleGrid[0][0] == 0 else 0
        # Initialize the first row and col
        for row in range(1,m):
            dp[row][0] = (dp[row-1][0] if obstacleGrid[row][0]==0 else 0)
        for col in range(1,n):
            dp[0][col] = (dp[0][col-1] if obstacleGrid[0][col]==0 else 0)
    
        for row in range(1,m):
            for col in range(1,n):
                if obstacleGrid[row][col] == 1:
                    dp[row][col] = 0
                else:
                    dp[row][col] = dp[row-1][col] + dp[row][col-1]
            
        return dp[m-1][n-1]
      
