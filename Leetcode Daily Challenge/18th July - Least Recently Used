class Node:
    def __init__(self):
        self.key = 0
        self.val = 0
        self.next = None
        self.prev = None
class LRUCache:

    def __init__(self, capacity: int):
        self.head = Node()
        self.tail = Node()
        self.head.next = self.tail
        self.tail.prev = self.head
        self.size = capacity
        self.cache = {}
    def remove(self, key):
        # print(key, self.cache)
        curr = self.cache[key]
        prv = curr.prev
        nxt = curr.next
        #remove 
        prv.next = nxt
        nxt.prev = prv
        del self.cache[key]
    def addFront(self, key, value):
        new = Node()
        new.key = key
        new.val = value
        temp = self.head.next
        self.head.next = new
        new.prev = self.head
        new.next = temp
        temp.prev = new
        self.cache[key] = new
    def get(self, key: int) -> int:
        if key in self.cache:
            curr = self.cache[key]
            value = curr.val
            self.remove(key)
            self.addFront(key, value)
            return value
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        # print(self.cache)
        if key in self.cache:
            self.remove(key)
            self.addFront(key, value)
        else:
            if len(self.cache)<self.size:
                self.addFront(key, value)
            else:
                curr = self.tail.prev
                self.remove(curr.key)
                # print(curr.key, curr.val)
                self.addFront(key, value)
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
