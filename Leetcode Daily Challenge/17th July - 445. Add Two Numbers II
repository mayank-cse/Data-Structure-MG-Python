https://leetcode.com/problems/add-two-numbers-ii/description/
***************************************************
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverse(self,root):
        curr = root
        prev = None
        while curr!=None:
            temp = curr.next
            curr.next = prev
            prev, curr = curr, temp
        return prev
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        carry = 0 # max it can go to one
        rl1 = self.reverse(l1)
        rl2 = self.reverse(l2)
        curr1 = rl1
        curr2 = rl2
        dummy = ListNode()
        curr = dummy
        while curr1!=None and curr2 != None:
            newNode = ListNode()
            if curr1.val + curr2.val+carry<10:
                newNode.val = curr1.val + curr2.val+carry
                carry = 0
            else:
                newNode.val = (curr1.val + curr2.val+carry)%10
                carry = 1
            curr1 = curr1.next
            curr2 = curr2.next
            curr.next = newNode
            curr = curr.next
        while curr1 != None:
            newNode = ListNode()
            if curr1.val+carry<10:
                newNode.val = curr1.val + carry
                carry = 0
            else:
                newNode.val = (curr1.val + carry)%10
                carry = 1
            curr1 = curr1.next
            curr.next = newNode
            curr = curr.next
        
        while curr2 != None:
            newNode = ListNode()
            if curr2.val+carry<10:
                newNode.val = curr2.val + carry
                carry = 0
            else:
                newNode.val = (curr2.val + carry)%10
                carry = 1
            curr2 = curr2.next
            curr.next = newNode
            curr = curr.next
        if carry != 0:
            newNode = ListNode()
            newNode.val = 1
            curr.next = newNode
            curr = curr.next
        curr.next = None
        return self.reverse(dummy.next)


    
