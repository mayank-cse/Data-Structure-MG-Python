*************************BFS - 49/50
class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        def helper(row, col, mat):
            queue = [(row,col)]
            count = -1
            flag = 0
            visited = {}
            while queue:
                n = len(queue)
                count += 1
                for _ in range(n):
                    x,y = queue.pop(0)
                    visited[(x,y)] = 1
                    if mat[x][y] == 0:
                        return count
                    if x+1<len(mat) and (x+1,y) not in visited:
                        queue.append((x+1,y))
                    if y+1<len(mat[0]) and (x,y+1) not in visited:
                        queue.append((x,y+1))
                    if x-1>=0 and (x-1,y) not in visited:
                        queue.append((x-1,y))
                    if y-1>=0 and (x,y-1) not in visited:
                        queue.append((x,y-1))
            return -1
        for i in range(len(mat)):
            for j in range(len(mat[0])):
                mat[i][j] = helper(i,j,mat)
        return mat
*************************
class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        def helper(row, col, mat):
            queue = [(row,col)]
            count = -1
            flag = 0
            visited = {}
            while queue:
                n = len(queue)
                count += 1
                for _ in range(n):
                    x,y = queue.pop(0)
                    visited[(x,y)] = 1
                    if mat[x][y] == 0:
                        return count
                    if x+1<len(mat) and (x+1,y) not in visited:
                        queue.append((x+1,y))
                    if y+1<len(mat[0]) and (x,y+1) not in visited:
                        queue.append((x,y+1))
                    if x-1>=0 and (x-1,y) not in visited:
                        queue.append((x-1,y))
                    if y-1>=0 and (x,y-1) not in visited:
                        queue.append((x,y-1))
            return -1
        for i in range(len(mat)):
            for j in range(len(mat[0])):
                mat[i][j] = helper(i,j,mat)
        return mat
        
