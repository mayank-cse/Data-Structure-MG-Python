
You are given two linked lists: list1 and list2 of sizes n and m respectively.

Remove list1's nodes from the ath node to the bth node, and put list2 in their place.

The blue edges and nodes in the following figure indicate the result:


*************************************************
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeInBetween(self, list1: ListNode, a: int, b: int, list2: ListNode) -> ListNode:
        head = list1
        tail2 = list2
        while tail2.next:
            tail2 = tail2.next
        if a == 0:
            k = 0
            curr1b= curr1a
            while k!=b:
                curr1b = curr1b.next
                k+=1
            tail2.next =curr1b.next
            return list2
        
        curr1a = list1
        k = 0
        while k!= a-1:
            curr1a = curr1a.next
            k+=1
        k = 0
        curr1b = list1
        while k!=b:
            curr1b = curr1b.next
            k+=1
        curr1a.next = list2
        tail2.next = curr1b.next
        return list1
