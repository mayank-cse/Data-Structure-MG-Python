Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

Example 1:
Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]

Example 2:
Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length
**************************************
class Solution:
    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        tmp = [-1 for _ in range(len(nums))]
        d = {0:1}
        ans = 0
        sumCurr = 0
        for i in range(len(nums)):
            sumCurr += nums[i]
            tmp = sumCurr - goal
            if tmp >=0:
                if tmp in d:
                    ans+=d[tmp]
            if sumCurr in d:
                d[sumCurr]+=1
            else:
                d[sumCurr]=1
            
        return ans
