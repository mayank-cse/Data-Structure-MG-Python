### Problem Description 📜

You are given an undirected star graph consisting of `n` nodes labeled from 1 to `n`. A star graph is a graph where there is one center node and exactly `n - 1` edges that connect the center node with every other node.

You are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Your task is to return the center of the given star graph.

### Example 📚

**Example 1:**
```
Input: edges = [[1,2],[2,3],[4,2]]
Output: 2
Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.
```

**Example 2:**
```
Input: edges = [[1,2],[5,1],[1,3],[1,4]]
Output: 1
```

### Constraints
- 3 <= n <= 10^5
- `edges.length` == `n - 1`
- `edges[i].length` == 2
- 1 <= `ui`, `vi` <= `n`
- `ui` != `vi`
- The given edges represent a valid star graph.

### Solution Explanation 💡

To find the center of the star graph, we can leverage the fact that the center node will appear in every edge. Thus, the center node will be a common node in the first two edges.

### Emoji Explanation 📝

1. **Identify Nodes in Edges**: 🕵️‍♂️ Identify nodes in the first two edges.
2. **Find Common Node**: 🔍 Check for the common node in these two edges.
3. **Return Center Node**: 🌟 Return the common node as the center.

### Solution Code in Python, Java, and C++ 💻

#### Python 🐍
```python
class Solution:
    def findCenter(self, edges: List[List[int]]) -> int:
        # Identify nodes in the first two edges 🕵️‍♂️
        start1, end1 = edges[0][0], edges[0][1]
        start2, end2 = edges[1][0], edges[1][1]
        
        # Find common node 🔍
        if start1 == start2 or start1 == end2:
            return start1
        else:
            return end1
```

#### Java ☕
```java
class Solution {
    public int findCenter(int[][] edges) {
        // Identify nodes in the first two edges 🕵️‍♂️
        int start1 = edges[0][0], end1 = edges[0][1];
        int start2 = edges[1][0], end2 = edges[1][1];
        
        // Find common node 🔍
        if (start1 == start2 || start1 == end2) {
            return start1;
        } else {
            return end1;
        }
    }
}
```

#### C++ 💻
```cpp
class Solution {
public:
    int findCenter(vector<vector<int>>& edges) {
        // Identify nodes in the first two edges 🕵️‍♂️
        int start1 = edges[0][0], end1 = edges[0][1];
        int start2 = edges[1][0], end2 = edges[1][1];
        
        // Find common node 🔍
        if (start1 == start2 || start1 == end2) {
            return start1;
        } else {
            return end1;
        }
    }
};
```

### Summary 🌟

- **Problem**: Find the center of a given star graph.
- **Solution**: Use the first two edges to determine the common node, which is the center.
- **Approaches**:
  - **Python**: Use list indexing to find the common node.
  - **Java**: Use array indexing to find the common node.
  - **C++**: Use vector indexing to find the common node.
