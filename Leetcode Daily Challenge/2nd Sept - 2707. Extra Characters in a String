******************************Python
class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        dp = [-1 for _ in range(len(s))]
        def helper(ind):
            # print(ind)
            if ind == len(s):
                return 0
            if dp[ind] != -1:
                return dp[ind]
            temp = ''
            ans = float('inf')
            for i in range(ind, len(s)):
                temp += s[i]
                if temp in dictionary:
                    # 2 options
                    ans = min(ans,helper(i+1))
            ans = min(ans, helper(ind+1)+1)
            dp[ind] = ans
            return ans
        return helper(0)

******************************C++
class Solution {
public:
    int minExtraChar(std::string s, std::vector<std::string>& dictionary) {
        std::vector<int> dp(s.length(), -1);
        return helper(s, dictionary, dp, 0);
    }

private:
    int helper(const std::string& s, const std::vector<std::string>& dictionary, std::vector<int>& dp, int ind) {
        if (ind == s.length()) {
            return 0;
        }
        if (dp[ind] != -1) {
            return dp[ind];
        }
        std::string temp = "";
        int ans = INT_MAX;
        for (int i = ind; i < s.length(); ++i) {
            temp += s[i];
            if (std::find(dictionary.begin(), dictionary.end(), temp) != dictionary.end()) {
                ans = std::min(ans, helper(s, dictionary, dp, i + 1));
            }
        }
        ans = std::min(ans, helper(s, dictionary, dp, ind + 1) + 1);
        dp[ind] = ans;
        return ans;
    }
};
