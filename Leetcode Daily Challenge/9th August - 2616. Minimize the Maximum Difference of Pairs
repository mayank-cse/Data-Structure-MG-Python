2616. Minimize the Maximum Difference of Pairs
*******************************Dynamic Programing
class Solution:
    def minimizeMax(self, nums: List[int], p: int) -> int:
        nums.sort()
        if len(nums)//2<p:
            return -1
        # dp = [[-1 for _ in range(p+1)] for _ in range(len(nums))]
        dp = {}
        @cache
        def helper(ind, k, diff):
            if k == 0:
                return diff
            if ind>=len(nums):
                return float('inf')
            # if dp[ind][k]!=-1:
            #     return dp[ind][k]
            if (ind, k, diff) in dp:
                return dp[(ind, k, diff)]
            take = float('inf')
            if ind+1< len(nums):
                take = helper(ind+2, k-1, max(diff, abs(nums[ind]-nums[ind+1])))
            notTake = helper(ind+1,k, diff)
            # dp[ind][k] = min(take, notTake)
            dp[(ind, k, diff)] = min(take, notTake)
            return min(take, notTake)
        return helper(0, p, 0)
*************************************Binary Search

First, we sort the array nums.
We define our search space with low being 0 and high being the difference between the maximum and minimum values in nums.
During each iteration of the binary search, we calculate the mid-point and check if we can form the required pairs using our helper function can_form_pairs(mid).
If we can form the required pairs, our current mid value is feasible, so we might be able to find an even smaller maximum difference. Therefore, we update high to mid.
If not, our mid value is too small, so we update low to mid + 1.
Finally, we return low, which will be the smallest maximum difference for which we can form the required number of pairs.

Complexity
Time Complexity: O(n log m), where nnn is the length of the array and mmm is the difference between the maximum and minimum values in the array. Sorting the array takes O(n log n) and the binary search process, combined with the greedy check, takes O(n log m).

Space Complexity: O(1). We only use a constant amount of space for our variables.
class Solution:
    def minimizeMax(self, nums: List[int], p: int) -> int:
        nums.sort()
        def count(d):
            i = 0
            count = 0
            while i<len(nums)-1:
                if nums[i+1] - nums[i]<=d:
                    count +=1
                    i+=1
                if count>=p:
                    return True
                i+=1
            return False
        left = 0
        right = abs(nums[len(nums)-1] - nums[0])
        while left < right:
            mid = left + (right - left)//2
            if count(mid):
                right = mid
            else:
                left = mid+1
        return left
