Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
Example 2:

Input: root = [0,null,1]
Output: [1,null,1]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
0 <= Node.val <= 100
All the values in the tree are unique.
 

Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/
**********************************************************
### Problem Description 📜

You are given the root of a Binary Search Tree (BST). The task is to convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in the BST.

A Binary Search Tree satisfies the following properties:
- The left subtree of a node contains only nodes with keys less than the node's key.
- The right subtree of a node contains only nodes with keys greater than the node's key.
- Both the left and right subtrees must also be binary search trees.

### Example 📚

**Example 1:**
```
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
```

**Example 2:**
```
Input: root = [0,null,1]
Output: [1,null,1]
```

### Constraints
- The number of nodes in the tree is in the range [1, 100].
- 0 <= Node.val <= 100
- All the values in the tree are unique.

### Solution Explanation 💡

To convert the BST to a Greater Tree, we perform a reverse in-order traversal (right -> node -> left). During this traversal, we keep track of the running sum of all nodes we have visited so far. We update the value of each node to include this running sum.

1. **Reverse In-order Traversal**: This allows us to start from the largest values and accumulate the sum as we go.
2. **Update Node Values**: For each node, update its value to include the accumulated sum of all greater nodes.

### Approach 🚀

1. **Initialize Current Sum**: Start with a current sum of zero.
2. **Helper Function for Traversal**: Create a helper function to perform the reverse in-order traversal.
3. **Update and Recur**: Update the node value and recur for the left subtree.

### Solution Code in Python, Java, and C++ 💻

#### Python 🐍
```python
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def bstToGst(self, root: TreeNode) -> TreeNode:
        self.currSum = 0
        
        def helper(node):
            if not node:
                return
            helper(node.right)  # Traverse right
            self.currSum += node.val
            node.val = self.currSum
            helper(node.left)  # Traverse left
        
        helper(root)
        return root
```

#### Java ☕
```java
// Definition for a binary tree node.
public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    private int currSum = 0;

    public TreeNode bstToGst(TreeNode root) {
        helper(root);
        return root;
    }

    private void helper(TreeNode node) {
        if (node == null) {
            return;
        }
        helper(node.right);  // Traverse right
        currSum += node.val;
        node.val = currSum;
        helper(node.left);  // Traverse left
    }
}
```

#### C++ 💻
```cpp
// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

class Solution {
private:
    int currSum = 0;

    void helper(TreeNode* node) {
        if (!node) {
            return;
        }
        helper(node->right);  // Traverse right
        currSum += node->val;
        node->val = currSum;
        helper(node->left);  // Traverse left
    }

public:
    TreeNode* bstToGst(TreeNode* root) {
        helper(root);
        return root;
    }
};
```

### Emoji Explanation 📝

1. **Problem Statement**: 🌳 Convert a BST to a Greater Tree by adding the sum of all greater keys to each node.
2. **Solution Steps**:
   - 🛠 Initialize `currSum` to zero.
   - ➡️ Perform reverse in-order traversal (right -> node -> left).
   - 🔄 Update each node's value to include the sum of all greater keys.
   - ✅ Return the modified tree root.
