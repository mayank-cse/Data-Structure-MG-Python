Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]

Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
*********************************************
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        ans = list(permutations(nums))
        return ans
*********************************************
class Solution:
    def helper(self, nums, visited, permutation, output):
        # print(nums, visited, permutation,output)
        if len(permutation) == len(nums):
            print(permutation)
            output.append(permutation)
            return
        for i in range(len(nums)):
            if visited[i]==0:
                visited[i] = 1
                self.helper(nums, visited, permutation+[nums[i]],output)
                visited[i] = 0
    def permute(self, nums: List[int]) -> List[List[int]]:
        output = []
        self.helper(nums,[0]*len(nums), [], output)
        return output
*********************************************
class Solution:
    def helper(self, nums, ind, permutation, output):
        if ind==len(nums):
            #base case
            print(permutation)
            output.append(permutation)
            return
        for i in range(ind, len(nums)):
            #swap nums[i] and nums[ind]
            nums[i],nums[ind] = nums[ind],nums[i]
            self.helper(nums,ind+1, permutation + [nums[ind]], output)
            nums[i],nums[ind] = nums[ind], nums[i]
            
    def permute(self, nums: List[int]) -> List[List[int]]:
        output = []
        self.helper(nums, 0, [], output)
        return output
