Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]

Constraints:
The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

Follow up: Could you do this in one pass?
***********************************************
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        count = 0
        curr = head
        while curr:
            curr = curr.next
            count +=1
        
        count = count - n
        
        if count == 0: 
            return head.next
        print(count)
        curr = head
        for i in range(count-1):
            curr = curr.next
            print("current value", curr.val)

        #delete
        # print(curr.next.val)
        if curr.next and curr.next.next:
            curr.next = curr.next.next
        else:
            curr.next = None

        return head
************************************************
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        
        slow, fast = head, head
        for i in range(n):
            fast = fast.next
        if fast == None: return head.next
        while fast.next:
            fast = fast.next
            slow = slow.next
        
        slow.next = slow.next.next
        return head
        
