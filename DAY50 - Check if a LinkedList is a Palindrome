Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false

Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9

Follow up: Could you do it in O(n) time and O(1) space?
***********************************************
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        # Find middle
        fast = head
        slow = head
        while fast.next and fast.next.next:
            fast = fast.next.next
            slow = slow.next
        #slow is at the middle element
        rev = slow.next
        # reverse a LinkedList
        prev, curr = None, slow.next

        while curr:
            temp = curr.next
            curr.next = prev
            prev,curr = curr, temp
        currRev = prev
        currHead = head
        while currRev:
            if currRev.val != currHead.val:
                return False
            currRev = currRev.next
            currHead = currHead.next
        return True
