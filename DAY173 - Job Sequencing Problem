Given a set of N jobs where each jobi has a deadline and profit associated with it.
Each job takes 1 unit of time to complete and only one job can be scheduled at a time. We earn the profit associated with job if and only if the job is completed by its deadline.
Find the number of jobs done and the maximum profit.

Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job.

Example 1:
Input:
N = 4
Jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}
Output:
2 60
Explanation:
Job1 and Job3 can be done with
maximum profit of 60 (20+40).

Example 2:
Input:
N = 5
Jobs = {(1,2,100),(2,1,19),(3,2,27),
        (4,1,25),(5,1,15)}
Output:
2 127
Explanation:
2 jobs can be done with
maximum profit of 127 (100+27).

Your Task :
You don't need to read input or print anything. Your task is to complete the function JobScheduling() which takes an integer N and an array of Jobs(Job id, Deadline, Profit) as input and returns the count of jobs and maximum profit as a list or vector of 2 elements.

Expected Time Complexity: O(NlogN)
Expected Auxilliary Space: O(N)

Constraints:
1 <= N <= 105
1 <= Deadline <= N
1 <= Profit <= 500

************************************************
(Using while look it gave TLE, but just by changing it to while loop it worked...Why?)
#User function Template for python3

class Solution:
    
    #Function to find the maximum profit and the number of jobs done.
    def JobScheduling(self,Jobs,n):
        
        # code here
        Jobs.sort(key = lambda x: -x.profit)
        maxDeadline = 0
        for i in Jobs:
            maxDeadline = max(maxDeadline, i.deadline)
        ans = [-1]*maxDeadline
        count = 0
        profit = 0
        for i in Jobs:
            # print(i.deadline, i.profit)
            for k in range(i.deadline-1, -1, -1):
                if ans[k] == -1:
                    ans[k] = i.profit
                    count+=1
                    profit += i.profit
                    break

                
        return count, profit
