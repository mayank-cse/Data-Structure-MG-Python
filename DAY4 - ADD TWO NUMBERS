2. Add Two Numbers
Medium
23.2K
4.5K
Companies
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
Accepted
3.3M
Submissions
8.3M
Acceptance Rate
39.9%
**********************************
APPROACH
Step 1 - convert both the linkedlist to string
Step 2 - reverse them using slicing statement and add them 
Step 3 - reverse the obtained string create a linked list for it

**********************************


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        s1 = ""
        while(l1):
            # print (l1.val)
            s1 += str(l1.val)
            l1=l1.next
        # print(s)
        s2 = ""
        while(l2):
            s2 += str(l2.val)
            l2=l2.next
        # print(s2)
        # l1.val
        s1 = s1[::-1]
        s2 = s2[::-1]
        # print(s1,s2)
        temp1 = int(s1)
        temp2 = int(s2)
        s = str(temp1+temp2)
        print(s)
        s = s[::-1]
        # ListNode myList = new ListNode
        head = ListNode(s[0])
        tail = head
        for i in range (1, len(s)):
            tail.next = ListNode(s[i])
            tail = tail.next
        return head

********************************************************
APPROACH
STEP 1 - while l1 and l2 are present add them and take carry
STEP 2 - if L1+l2+carry>10 mod 10 -> carry = 1
STEP 3 - while L1
STEP 4 - WHILE L2
***********************************
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        carry = 0
        head = ListNode(None)
        curr = head
        while ( l1 and l2):
            if (l1.val + l2.val + carry)>=10:
                curr.next = ListNode((l1.val + l2.val+ carry)%10 )
                carry = 1
                curr = curr.next
                l1 = l1.next
                l2 = l2.next
                continue
            else:
                temp  = l1.val + l2.val + carry
                curr.next = ListNode((l1.val + l2.val + carry)%10)
                carry = 0
                curr = curr.next
                l1 = l1.next
                l2 = l2.next
        while(l1):
            temp = l1.val + carry
            curr.next = ListNode((l1.val+carry)%10)
            carry = 0
            if (temp)>=10:
                carry = 1
            curr = curr.next
            l1 = l1.next
        while(l2):
            temp = l2.val + carry
            curr.next = ListNode((l2.val + carry)%10)
            carry = 0
            if (temp)>=10:
                carry = 1
            curr = curr.next
            l2 = l2.next
        if(carry):
            curr.next = ListNode(carry)
        return head.next
