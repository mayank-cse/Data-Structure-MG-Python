# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverse(self, head):
        prev=None
        curr=head
        while curr:
            temp = curr.next
            curr.next = prev
            prev, curr = curr, temp
        return prev

    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        fast = head
        slow = head 
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        revHead = self.reverse(slow)
        curr1 = head
        curr2 = revHead
        while curr2:
            if curr1.val!=curr2.val:
                return False
            curr2=curr2.next
            curr1=curr1.next
        return True
********************************************
