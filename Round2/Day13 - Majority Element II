Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. 

Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
Input: nums = [1]
Output: [1]

Example 3:
Input: nums = [1,2]
Output: [1,2]

Constraints:
1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
**************************************
class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        ele1=ele2=count1=count2 = 0
        for char in nums:
            if count1 == 0 and ele1 != char and ele2!=char:
                ele1 = char
                count1+=1
                continue
            if count2 == 0 and ele1 != char and ele2!=char:
                ele2 = char
                count2+=1
                continue
            if ele1 == char:
                count1+=1
                continue
            if ele2 == char:
                count2+=1
                continue
            if char != ele1 and char != ele2:
                count1-=1
                count2-=1
                continue
        ans = []
        if nums.count(ele1) > len(nums)/3:
            ans.append(ele1)
        
        if nums.count(ele2) > len(nums)/3 and ele1!=ele2:
            ans.append(ele2)
        return ans
        
NOTE::: if char != ele1 but char == ele2: countEle1 -=1 won't happend
            
