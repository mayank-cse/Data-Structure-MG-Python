You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104
*********************************************
class Solution:
    def binarySearch(self, arr, start, end, target):
        print(arr)
        mid = start + (end-start)//2
        if(start > end):
            return False
        if arr[mid] == target:
            return True
        elif arr[mid] < target:
            return self.binarySearch(arr, mid+1,end,target)
        
        elif arr[mid] > target:
            return self.binarySearch(arr, start,mid-1,target)
        else:
            return False
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        end = len(matrix)-1
        start = 0
        while start<=end:
            mid = start +(end-start)//2
            print(mid,target)
            if target <= matrix[mid][len(matrix[0])-1]:
                if target<matrix[mid][0]:
                    end  = mid -1
                elif target>matrix[mid][0]:
                    return self.binarySearch(matrix[mid], 0, len(matrix[0])-1, target)
                else:
                    return True
            else:
                start = mid+1
