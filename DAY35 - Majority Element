Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

Constraints:
n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109

Follow-up: Could you solve the problem in linear time and in O(1) space?
****************************************************
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        length = len(nums)
        d = Counter(nums)
        for i in nums:
            if d[i]>length/2:
                return i
****************************************************
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        nums = sorted(nums)
        print(nums)
        maxCount = 0
        majEle = 0
        temp = nums[0]
        count = 0
        for i,ele in enumerate(nums):
            if ele!= temp:
                if count>maxCount:
                    maxCount = count
                    majEle = temp
                temp = ele
                count = 1
            else :
                count+=1
        if count>maxCount:
            majEle = ele
        return majEle
****************************************************
**MOORE'S VOTING ALGORITHM**
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        counter = 0
        element = 0
        for i, ele in enumerate(nums):
            if counter == 0:
                element = ele
                counter = 1
            else:
                if element == ele:
                    counter +=1
                else:
                    counter-=1
        return element
