You are given two integers num1 and num2.

In one operation, you can choose integer i in the range [0, 60] and subtract 2i + num2 from num1.

Return the integer denoting the minimum number of operations needed to make num1 equal to 0.

If it is impossible to make num1 equal to 0, return -1.

 

Example 1:

Input: num1 = 3, num2 = -2
Output: 3
Explanation: We can make 3 equal to 0 with the following operations:
- We choose i = 2 and substract 22 + (-2) from 3, 3 - (4 + (-2)) = 1.
- We choose i = 2 and substract 22 + (-2) from 1, 1 - (4 + (-2)) = -1.
- We choose i = 0 and substract 20 + (-2) from -1, (-1) - (1 + (-2)) = 0.
It can be proven, that 3 is the minimum number of operations that we need to perform.
Example 2:

Input: num1 = 5, num2 = 7
Output: -1
Explanation: It can be proven, that it is impossible to make 5 equal to 0 with the given operation.
 

Constraints:

1 <= num1 <= 109
-109 <= num2 <= 109

****************************************************
class Solution:
    def makeTheIntegerZero(self, num1: int, num2: int) -> int:
        k = 0
        while num1 > 0:
            num1 -= num2
            k += 1
            # print(bin(num1), num1.bit_count(), k)
            if num1 > 0 and num1.bit_count() <= k and num1 >= k:
                return k
        return -1
**************************************************
class Solution:
    def makeTheIntegerZero(self, num1: int, num2: int) -> int:
        for k in range(61):
            target = num1-k*num2
            if  target>0 and target.bit_count() <= k and target >= k:
                return k
        return -1
Intuition
After a bit of playing around, it seems hard to find an explicit formula for the answer. As with many computer science problems, we can instead try to search over the answer space, trading runtime for ease of implementation.

Approach
We can test whether or not kkk operations is sufficient for some given kkk.

If kkk operations are used, then num1=(num2+2i1)+(num2+2i2)+⋯+(num2+2ik)=k⋅num2+(2i1+2i2+⋯+2ik)\mathrm{num1} = (\mathrm{num2} + 2^{i_1}) + (\mathrm{num2} + 2^{i_2}) + \dots + (\mathrm{num2} + 2^{i_k}) = k\cdot\mathrm{num2} + (2^{i_1}+2^{i_2}+\dots+2^{i_k})num1=(num2+2 
i 
1
​
 
 )+(num2+2 
i 
2
​
 
 )+⋯+(num2+2 
i 
k
​
 
 )=k⋅num2+(2 
i 
1
​
 
 +2 
i 
2
​
 
 +⋯+2 
i 
k
​
 
 ) for some i1,i2,…,ik∈[0,60]i_1,i_2,\dots,i_k\in [0, 60]i 
1
​
 ,i 
2
​
 ,…,i 
k
​
 ∈[0,60].
Rearranging, this gives target:=num1−k⋅num2=2i1+2i2+⋯+2ik\mathrm{target}:=\mathrm{num1}-k\cdot\mathrm{num2}=2^{i_1}+2^{i_2}+\dots+2^{i_k}target:=num1−k⋅num2=2 
i 
1
​
 
 +2 
i 
2
​
 
 +⋯+2 
i 
k
​
 
 .
Observe that we can construct any positive integer xxx with at least x.bit_count()x\mathrm{.bit\_count}()x.bit_count() powers of two and at most xxx powers of two. This is because we can start with the powers of two that make up the bits of xxx, then continue to split apart larger powers of two into smaller powers of two until we are left with just 1's. For instance, 5=4+1=(2+2)+1=2+(1+1)+1=(1+1)+1+1+15=4+1=(2+2)+1=2+(1+1)+1=(1+1)+1+1+15=4+1=(2+2)+1=2+(1+1)+1=(1+1)+1+1+1. Thus, we must have target.bit_count() <= k <= target.
Using the above algorithm to determine whether a certain number of operations is valid, we can do a linear search through all possible number of operations in [0,60][0, 60][0,60] and take the minimum valid answer.

Complexity
Time complexity: O(1)O(1)O(1)

Space complexity: O(1)O(1)O(1)

Code
class Solution:
    def makeTheIntegerZero(self, num1: int, num2: int) -> int:
        for k in range(61):
            target = num1 - k * num2
            if target >= 0 and target.bit_count() <= k <= target:
                return k
        return -1
Edit: Why the answer is bounded from above by 60
For those who are asking, here's an explanation of why the answer is bounded from above by 60. It can be seen intuitively but may require a bit of casework to prove rigorously.

Assume there is no valid answer for k <= 60. Then, at least one of the following hold for k = 60:

target < 0,
target.bit_count() > k, or
k > target.
(2) is impossible since target := num1 - k * num2 is bounded from above by the input constraints.

If (1) is true, then num1 - k * num2 < 0 implies num2 > 0, meaning target is strictly decreasing while k is strictly increasing. If we have not found a solution by this point, this implies there is no solution past 60.

If (3) is true, k > num1 - k * num2 implies k * (num2 + 1) > num1, meaning either num2 = 0, in which case k = num1.bit_count() will have previously been a valid answer, or num2 > 0. Again, target is strictly decreasing while k is strictly increasing; there is no solution.

In all cases, there is either a contradiction or no solution; k is bounded from above. As a matter of fact, I believe there can be a tighter bound on k as long as the argument for (2) holds.
