Given a Binary search tree. Your task is to complete the function which will return the Kth largest element without doing any modification in Binary Search Tree.

Example 1:
Input:
      4
    /   \
   2     9
k = 2 
Output: 4

Example 2:
Input:
       9
        \ 
          10
K = 1
Output: 10

Your Task:
You don't need to read input or print anything. Your task is to complete the function kthLargest() which takes the root of the BST and an integer K as inputs and returns the Kth largest element in the given BST.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(H) where H is max recursion stack of height h at a given time.

Constraints:
1 <= N <= 1000
1 <= K <= N
******************************************
#User function Template for python3

# class Node:
#     def __init__(self, val):
#         self.data = val
#         self.left = None
#         self.right = None

# return the Kth largest element in the given BST rooted at 'root'
class Solution:
    def __init__(self):
        self.count = 0
        self.ans = 0
    def helper(self, root, k):
        if not root:
            return 
        self.helper(root.right, k)
        self.count+=1
        if self.count==k:
            self.ans = root.data
        self.helper(root.left, k)
        return 
    def kthLargest(self,root, k):
        #your code here
        self.helper(root,k)
        return self.ans
