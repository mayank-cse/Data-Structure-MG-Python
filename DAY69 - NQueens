The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:
Input: n = 1
Output: [["Q"]]
 
Constraints:
1 <= n <= 9
******************************************************
MY CODE, everything working but not getting stored in output
class Solution:
    def check(self, board, row, col):
        n = len(board[0])
        # print(row,col)
        #check the row
        for c in range(n):
            if board[row][c]==1 and c!=col:
                return False
        
        #check the col
        for r in range(n):
            if board[r][col]==1 and r!=row:
                return False
        
        #check the left diagonal
        r = row
        c = col
        while r>=0 and c>=0:
            if board[r][c]==1:
                return False
            r-=1
            c-=1
        r = row
        c = col
        #check the right diagonal
        while r>=0 and c<n:
            if board[r][c]==1:
                return False
            r-=1
            c+=1

        return True

    def helper(self, board, row,col,output):
        # print(output)
        if row == len(board[0]):
            output.append(board[:])
            print(output)
            return
        if col == len(board[0]):
            return

        if self.check(board, row, col):
            board[row][col] = 1
            self.helper(board, row+1, 0,output)
            board[row][col] = 0
        self.helper(board,row, col+1,output)
        return
    def solveNQueens(self, n: int) -> List[List[str]]:
        
        board = [[0 for i in range(n)] for j in range(n)]
        output = []
        self.helper(board,0,0,output)
        # print(output)
        return output
***************************************************
class Solution:
    def isSafe1(self, row, col, board, n):
        # check upper element
        duprow = row
        dupcol = col


        while row >= 0 and col >= 0:
            if board[row][col] == 'Q':
                return False
            row -= 1
            col -= 1


        col = dupcol
        row = duprow
        while col >= 0:
            if board[row][col] == 'Q':
                return False
            col -= 1


        row = duprow
        col = dupcol
        while row < n and col >= 0:
            if board[row][col] == 'Q':
                return False
            row += 1
            col -= 1


        return True


    def solve(self, col, board, ans, n):
        if col == n:
            ans.append(list(board))
            return


        for row in range(n):
            if self.isSafe1(row, col, board, n):
                board[row] = board[row][:col] + 'Q' + board[row][col+1:]
                self.solve(col+1, board, ans, n)
                board[row] = board[row][:col] + '.' + board[row][col+1:]


    def solveNQueens(self, n):
        ans = []
        board = ['.'*n for _ in range(n)]
        self.solve(0, board, ans, n)
        return ans
