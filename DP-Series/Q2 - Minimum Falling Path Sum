https://leetcode.com/problems/minimum-falling-path-sum/description/
******************************Recursion
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:

        def helper(row,col):
            if row==len(matrix)-1:
                return matrix[row][col]
            #3options
            ans= float('inf')
            if row+1<len(matrix) and 0<=col-1<len(matrix[row+1]):
                ans = min(ans, matrix[row][col]+ helper(row+1, col-1))
            if row+1<len(matrix) and 0<=col<len(matrix[row+1]):
                ans = min(ans, matrix[row][col]+helper(row+1, col))
            if row+1<len(matrix) and 0<=col+1<len(matrix[row+1]):
                ans = min(ans, matrix[row][col]+helper(row+1, col+1))
            return ans
        ans = float('inf')
        for i in range(len(matrix[0])):
            ans = min(ans,helper(0,i))
        return ans
T.C. - O(3^N)
S.C. - O(N)
***************************Memorization
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        dp = [[-1]*len(matrix[0]) for _ in range(len(matrix))]
        def helper(row,col):
            if row==len(matrix)-1:
                return matrix[row][col]
            if dp[row][col]!=-1:
                return dp[row][col]
            #3options
            ans= float('inf')
            if row+1<len(matrix) and 0<=col-1<len(matrix[row+1]):
                ans = min(ans, matrix[row][col]+ helper(row+1, col-1))
            if row+1<len(matrix) and 0<=col<len(matrix[row+1]):
                ans = min(ans, matrix[row][col]+helper(row+1, col))
            if row+1<len(matrix) and 0<=col+1<len(matrix[row+1]):
                ans = min(ans, matrix[row][col]+helper(row+1, col+1))
            dp[row][col] = ans
            return ans
        ans = float('inf')
        for i in range(len(matrix[0])):
            ans = min(ans,helper(0,i))
        return ans
********************************************Tabulation
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        dp = [[-1]*len(matrix) for _ in range(len(matrix))]
        # def helper(row,col):
        #     if row==len(matrix)-1:
        #         return matrix[row][col]
        #     if dp[row][col]!=-1:
        #         return dp[row][col]
        #     #3options
        #     ans= float('inf')
        #     if row+1<len(matrix) and 0<=col-1<len(matrix[row+1]):
        #         ans = min(ans, matrix[row][col]+ helper(row+1, col-1))
        #     if row+1<len(matrix) and 0<=col<len(matrix[row+1]):
        #         ans = min(ans, matrix[row][col]+helper(row+1, col))
        #     if row+1<len(matrix) and 0<=col+1<len(matrix[row+1]):
        #         ans = min(ans, matrix[row][col]+helper(row+1, col+1))
        #     dp[row][col] = ans
        #     return ans
        ans = float('inf')
        dp[0] = matrix[0].copy()
        for row in range(1,len(matrix)):
            for col in range(len(matrix)):
                ans= float('inf')
                if 0<=col-1<len(matrix[row-1]):
                    ans = min(ans, matrix[row][col]+ dp[row-1][col-1])
                if 0<=col<len(matrix[row-1]):
                    ans = min(ans, matrix[row][col]+dp[row-1][col])
                if 0<=col+1<len(matrix[row-1]):
                    ans = min(ans, matrix[row][col]+dp[row-1][col+1])
                dp[row][col] = ans
            
        return min(dp[len(matrix)-1])
        
