class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        lengthText1 = len(text1)
        lengthText2 = len(text2)
        dp = [[-1 for _ in range(lengthText2)] for _ in range(lengthText1)]
        def helper(ind1, ind2):
            if ind1 == lengthText1 or ind2 == lengthText2:
                return 0
            if dp[ind1][ind2]!=-1:
                return dp[ind1][ind2]
            take = 0
            if text1[ind1] == text2[ind2]:
                take = 1+ helper(ind1+1,ind2+1)
            notTake1 = helper(ind1+1, ind2)
            notTake2 = helper(ind1,ind2+1)
            dp[ind1][ind2] = max(take,notTake1,notTake2)
            return max(take, notTake1, notTake2)
        return helper(0,0)
************************************

Time Complexity: O(N*M)

Reason: There are N*M states therefore at max ‘N*M’ new problems will be solved.

Space Complexity: O(N*M) + O(N+M)

Reason: We are using an auxiliary recursion stack space(O(N+M)) (see the recursive tree, in the worst case, we will go till N+M calls at a time) and a 2D array ( O(N*M)).
