************************************
class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        def isPalindrome(s):
            if s[:] == s[::-1]:
                return True
            else:
                return False
        dp = {}
        def helper(ind, string):
            if ind==len(s):
                if isPalindrome(string):
                    return len(string)
                else:
                    return 0
            if (ind, string) in dp:
                return dp[(ind, string)]
        
            take = helper(ind+1, string+s[ind])
            notTake = helper(ind+1, string)
            dp[(ind, string)] = max(take, notTake)
            return max(take, notTake)
        return helper(0,"")
******************************
class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        text1 = s[:]
        text2 = s[::-1]
        lengthText1 = len(text1)
        lengthText2 = len(text2)
        dp = [[-1 for _ in range(lengthText2)] for _ in range(lengthText1)]
        def helper(ind1, ind2):
            if ind1 == lengthText1 or ind2 == lengthText2:
                return 0
            if dp[ind1][ind2]!=-1:
                return dp[ind1][ind2]
            take = 0
            if text1[ind1] == text2[ind2]:
                take = 1+ helper(ind1+1,ind2+1)
            notTake1 = helper(ind1+1, ind2)
            notTake2 = helper(ind1,ind2+1)
            dp[ind1][ind2] = max(take,notTake1,notTake2)
            return max(take, notTake1, notTake2)
        return helper(0,0)
************************************
class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        text1 = s[:]
        text2 = s[::-1]
        lengthText1 = len(text1)
        lengthText2 = len(text2)
        dp = [[0 for _ in range(lengthText2+1)] for _ in range(lengthText1+1)]
        
        for ind1 in range(1,lengthText1+1):
            for ind2 in range(1,lengthText2+1):
                take = 0
                if text1[ind1-1] == text2[ind2-1]:
                    take = 1+ dp[ind1-1][ind2-1]
                    dp[ind1][ind2] = take
                else:
                    notTake1 = dp[ind1-1][ind2]
                    notTake2 = dp[ind1][ind2-1]
                    dp[ind1][ind2] = max(notTake1,notTake2)
        
        return dp[lengthText1][lengthText2]
************************
class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        text1 = s[:]
        text2 = s[::-1]
        lengthText1 = len(text1)
        lengthText2 = len(text2)
        # dp = [[0 for _ in range(lengthText2+1)] for _ in range(lengthText1+1)]
        curr = [0 for _ in range(lengthText2+1)]
        prev = [0 for _ in range(lengthText2+1)]
        for ind1 in range(1,lengthText1+1):
            for ind2 in range(1,lengthText2+1):
                if text1[ind1-1] == text2[ind2-1]:
                    curr[ind2] = 1+ prev[ind2-1]
                else:
                    notTake1 = prev[ind2]
                    notTake2 = curr[ind2-1]
                    curr[ind2] = max(notTake1,notTake2)
            prev = curr[:]
        return prev[lengthText2]
 
