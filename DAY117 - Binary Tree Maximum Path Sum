A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.

Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Example 2:
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.

Constraints:
The number of nodes in the tree is in the range [1, 3 * 104].
-1000 <= Node.val <= 1000
******************************************
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self, maxi = -inf):
        self.maxi = maxi
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        self.maxi = root.val
        def helper(root):
            if not root:
                return 0
            print("left",root.val, self.maxi)
            lhs = max(helper(root.left),0)
            print("right",root.val, self.maxi)
            rhs = max(helper(root.right),0)
            if lhs+rhs+root.val>self.maxi:
                self.maxi = lhs+rhs+root.val
            print(lhs, rhs, root.val, rhs+lhs+root.val)
            return max(rhs,lhs)+root.val
        helper(root)
        return self.maxi
