You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

Constraints:
1 <= prices.length <= 105
0 <= prices[i] <= 104
****************************************
BRUTE FORCE METHOD

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        diff = [max(prices[i:])-min(prices[:i]) for i in range(1,len(prices))]
        return max(diff+[0])
****************************************
Better - But memory not optimal
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        mini, miniLst = prices[0], [prices[0]]
        for i in range(1, len(prices)):
            mini = min(mini, prices[i])
            miniLst.append(mini)
        # print(miniLst)
        diff = [prices[i] - miniLst[i] for i in range(1,len(prices))]
        return max(diff+[0])
****************************************
Optimal - T.C. = O(N) and S.C. = O(1)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        mini = prices[0]
        maxi = 0
        for i in range(1, len(prices)):
            diff = prices[i] - mini
            mini = min(prices[i], mini)
            if maxi<diff: 
                maxi = diff
        return maxi
